/*
    Copyright 2021 r-neal-kelly
*/

/**
* @class doc_nkr_os_heap_group_allocation
* @private
*
* @brief
*   Borrow a certain amount of memory from the heap. Use it, expand it, and give it back.
*/

    /**
    * @class doc_nkr_os_heap_Allocate
    * @private
    *
    * @brief
    *   Gives you memory to use until you deallocate it or your program exits.
    * 
    * @param byte_count
    *   must be greater than zero.
    *
    * @returns
    *   a pointer to the allocated bytes when it succeeds.
    *
    * @returns
    *   a `nullptr` when it fails.
    * 
    * @details
    *   There are a few limitations to the number of bytes you can allocate depending on:
    * 
    *   1. how much ram is physically in the computer
    *   2. how much space the operating system has left to give
    *   3. the settings that your compiler operates with
    *   4. what the natural word size of the processor is
    * 
    *   At most the largest number of bytes you will be able to allocate is the max number that can fit in an nkr::count_t (an alias of nkr::word_t). If you are running on a 32 bit processor you will only be able to allocate one byte shy of 4gb, which is no where near the amount of memory you can allocate on a 64 bit processor. Furthermore, limitations may come into play depending on the operating system, which may significantly decrease that amount even further.
    */

    /**
    * @class doc_nkr_os_heap_Reallocate
    * @private
    *
    * @brief
    *   Gives you more memory while keeping all your data intact.
    *
    * @param bytes
    *   should be a pointer returned by nkr::os::heap::Allocate. When successful, it will be set to a new pointer if necessary, or else it will be left unchanged.
    *
    * @param new_byte_count
    *   must be greater than zero.
    *
    * @returns
    *   `true` when it succeeds.
    *
    * @returns
    *   `false` when it fails.
    *
    * @details
    *   This will allocate more memory for you if `new_byte_count` is greater than the currently allocated `byte_count`, which is stored internally in the operating system. Otherwise, it will simply return as if it had succeeded, with no changes to `bytes`. See nkr::os::heap::Allocate for more details about allocation generally.
    *
    * @note
    *   This cannot shrink the memory you allocate, but some higher level types in the library can by request.
    *
    * @todo
    *   Maybe return an enum_t to indicate different kinds of failures, at least on Windows.
    */

    /**
    * @class doc_nkr_os_heap_Deallocate
    * @private
    *
    * @brief
    *   Takes back memory you no longer need so it can be reused later.
    *
    * @param bytes
    *   should be a pointer returned by nkr::os::heap::Allocate. It will be set to `nullptr` after deallocation.
    *
    * @details
    *   When using these functions, memory will never be deallocated automatically for you like it is in some higher level types. You will have to manually deallocate every pointer you allocate, or else you may unexpectedly run out of memory. Regardless, the operating system will deallocate everything that has not already been deallocated when your program exits.
    */

/**
* @class doc_nkr_os_heap_group_allocation_zero
* @private
*
* @brief
*   A variant of regular allocation, all the values in your memory will be initialized to zero.
*/

    /**
    * @class doc_nkr_os_heap_Allocate_Zeros
    * @private
    *
    * @brief
    *   Gives you zero-initialized memory to use until your program exits.
    *
    * @param byte_count
    *   must be greater than zero.
    *
    * @returns
    *   a pointer to the allocated zero-initialized bytes when it succeeds.
    *
    * @returns
    *   a `nullptr` when it fails.
    *
    * @details
    *   This uses an efficient operating system dependent algorithm to avoid zeroing out all values during runtime. Normally the os will keep pages of zero initialized bytes ready for allocation and it will only need to initialize them on the occasion that it doesn't have any of those pages readily available. Please see nkr::os::heap::Allocate for more details.
    *
    * @note
    *   The returned pointer can be used with nkr::os::heap::Reallocate to allocate more memory but without it being zero-intialized, and nkr::os::heap::Deallocate to free the memory. Both of these are currently frowned upon because they may not work in future updates or on certain operating systems.
    */

    /**
    * @class doc_nkr_os_heap_Reallocate_Zeros
    * @private
    * 
    * @brief
    *   Gives you more zero-initialized memory while keeping all your data intact.
    *
    * @param bytes
    *   should be a pointer returned by nkr::os::heap::Allocate_Zeros. When successful, it will be set to a new pointer if necessary, or else it will be left unchanged.
    *
    * @param new_byte_count
    *   must be greater than zero.
    *
    * @returns
    *   `true` when it succeeds.
    *
    * @returns
    *   `false` when it fails.
    *
    * @details
    *   Please see nkr::os::heap::Reallocate for more details.
    */

    /**
    * @class doc_nkr_os_heap_Deallocate_Zeros
    * @private
    * 
    * @brief
    *   Takes back memory you no longer need so it can be reused later.
    *
    * @param bytes
    *   should be a pointer returned by nkr::os::heap::Allocate_Zeros. It will be set to `nullptr` after deallocation.
    *
    * @details
    *   Please see nkr::os::heap::Deallocate for more details.
    *
    * @note
    *   This does not zero the memory.
    */
