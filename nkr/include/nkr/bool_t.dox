/*
    Copyright 2021 r-neal-kelly
*/

#pragma once

// bool_t
/**
* @class _2add9928_e370_4943_ba5b_2950d9e1da99
* @private
* 
* @brief
*   The default boolean type of this library which replaces nkr::std_bool_t, i.e. `bool`.
* 
* @details
*   Because nkr::std_bool_t (or `bool`) allows for integer operations to be done upon it, we've made a wrapper that completely disallows all such operations, truly making nkr::bool_t a real boolean value as opposed to a pseudo-integer. It behaves just like a boolean should and transiently works in expressions like nkr::std_bool_t. It also matches the size of the word of the machine, that is nkr::word_t, whereas nkr::std_bool_t is implementation defined. All library types and functions utilitze nkr::bool_t and use nkr::std_bool_t only for necessary C++ idioms.
*/

    // object data
    /**
    * @class _3dbc082f_9df8_4eda_b07f_fca297cc63a9
    * @private
    */

        // value
        /**
        * @class _9eefd4d6_1786_42ec_970a_c16c9bde2d42
        * @private
        */

    // objects
    /**
    * @class _727e30a1_ed17_4451_aefd_e9ff35d4be9c
    * @private
    */

        // default_ctor()
        /**
        * @class _507e6865_70dc_4e5b_97ab_c0d33e53dc67
        * @private
        */

        // value_ctor()
        /**
        * @class _2381ceb1_96d5_433e_a68e_898e08e5ef7f
        * @private
        */

        // copy_ctor()
        /**
        * @class _c692880f_ea8a_47c2_b8c8_98a00607b79b
        * @private
        */

        // move_ctor()
        /**
        * @class _f2621569_562c_44b6_a4be_cddfaf0b1147
        * @private
        */

        // volatile_copy_ctor()
        /**
        * @class _c2c40c6d_4153_4079_8231_a8f818fc4999
        * @private
        */

        // volatile_move_ctor()
        /**
        * @class _e5e66483_541d_4798_b386_2874446fb0de
        * @private
        */

        // value_assignment_ctor()
        /**
        * @class _195047e0_4c8b_42b1_a7c1_6f104757a05d
        * @private
        */

        // copy_assignment_ctor()
        /**
        * @class _9b3a1871_d4ff_4afb_886d_e0d16ebaad08
        * @private
        */

        // move_assignment_ctor()
        /**
        * @class _cf5bcded_4eb2_4cdb_92cd_aa5b66b3138b
        * @private
        */

        // volatile_value_assignment_ctor()
        /**
        * @class _02a973ac_1b0a_4340_9acd_5d20ac657dfb
        * @private
        */

        // volatile_copy_assignment_ctor()
        /**
        * @class _462d0286_9a2d_4ea9_8b92_3f75d50199ae
        * @private
        */

        // volatile_move_assignment_ctor()
        /**
        * @class _b047b3ab_68ee_46f3_b210_6f27f6f34ef1
        * @private
        */

        // dtor()
        /**
        * @class _4c312eec_919f_4b48_98e5_a3539442c7d2
        * @private
        */

    // casts
    /**
    * @class _6a6f9172_06fd_4b0f_b1ee_1817e0c013a9
    * @private
    * 
    * @details
    *   These are all explicit casts because we do not want any native operators to work upon the value. This disallows operators that handle the boolean as if its an integer.
    */

        // std_bool_t()
        /**
        * @class _27d5dbc6_c0b3_47f7_94c9_fda617dd82c8
        * @private
        */

        // std_bool_t() volatile
        /**
        * @class _676141d7_bb06_45a8_8b65_0f5ae7bee673
        * @private
        */

        // word_t&()
        /**
        * @class _4d0e7d29_353a_459f_89af_e11de2f19eea
        * @private
        */

        // const word_t&()
        /**
        * @class _9f6d257a_fc13_4dda_ad1b_7b268caf6dff
        * @private
        */

        // volatile word_t&()
        /**
        * @class _64e5638b_29ea_4e16_bde9_bfddde8c22b2
        * @private
        */

        // volatile const word_t&()
        /**
        * @class _3e6e7fd1_df11_44b3_a3d6_4f5073359d92
        * @private
        */

    // operators
    /**
    * @class _8c693fcc_abe9_493c_860c_4dab43f39a38
    * @private
    */

        // !()
        /**
        * @class _38d75d8f_81d4_4a44_b2b4_f1bfed690426
        * @private
        */

        // ==()
        /**
        * @class _a89e9a4d_657c_488c_918d_b579948ddf02
        * @private
        */

        // !=()
        /**
        * @class _3f13b8f4_f35d_4d4d_8e5c_7bd814c4877a
        * @private
        */

    // none_t interface
    /**
    * @class _a3769981_7e0b_4a14_9376_c341849febfb
    * @private
    */

        // =(none_t)
        /**
        * @class _9a7b8a4a_ce15_44e4_8900_5a09049c8b8a
        * @private
        */

        // ==(none_t)
        /**
        * @class _c21ea269_d645_4b2c_b938_27fce7ad0617
        * @private
        */

        // !=(none_t)
        /**
        * @class _37796b19_cde7_4029_a5f3_4203fa2315c8
        * @private
        */
