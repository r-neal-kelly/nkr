/*
    Copyright 2021 r-neal-kelly
*/

#pragma once

/**
* @defgroup traits traits
*
* @brief
*   C++20 concepts that are used to filter types in templates.
*
* @details
*   The term "trait" is not used in any standard C++ capacity, but specifically for use with this library. All trait names are followed by the "_tr" postfix to indicate that they are C++20 concepts used in place of 'typename' in template declarations.
*
* @todo
*   Add an example or several.
*/

    /**
    * @defgroup traits_integers integers
    * @ingroup traits
    *
    * @brief
    *   Filter types that can be treated as integers.
    * 
    * @details
    *   A few of these will accept nkr::bool_t:
    *   - nkr::integer_tr
    *   - nkr::integer_unsigned_tr
    *   - and possibly nkr::integer_8_tr
    */

        /**
        * @class traits_integers_integer_tr
        * @private
        * 
        * @brief
        *   Either unsigned or signed integers, including nkr::bool_t.
        */

        /**
        * @class traits_integers_integer_unsigned_tr
        * @private
        * 
        * @brief
        *   Allows nkr::bool_t.
        */

        /**
        * @class traits_integers_integer_signed_tr
        * @private
        * 
        * @brief
        *   Does not allow nkr::bool_t.
        */

        /**
        * @class traits_integers_integer_8_tr
        * @private
        * 
        * @brief
        *   Allows nkr::bool_t if `sizeof(bool) == 1`.
        */

        /**
        * @class traits_integers_integer_16_tr
        * @private
        */

        /**
        * @class traits_integers_integer_32_tr
        * @private
        */

        /**
        * @class traits_integers_integer_64_tr
        * @private
        */

        /**
        * @class traits_integers_integer_word_tr
        * @private
        * 
        * @brief
        *   Only allows integers that are the same size as nkr::word_t.
        */

    /**
    * @defgroup traits_casts casts
    * @ingroup traits
    *
    * @brief
    *   Filter types that can cast to other types.
    */

        /**
        * @class traits_casts_cast_word_tr
        * @private
        */

    /**
    * @defgroup traits_operators operators
    * @ingroup traits
    *
    * @brief
    *   Filter types that can use particular operators.
    */

        /**
        * @class traits_operators_operator_add_tr
        * @private
        */

        /**
        * @class traits_operators_operator_subtract_tr
        * @private
        */

    /**
    * @defgroup traits_misc misc
    * @ingroup traits
    *
    * @brief
    *   Filter types by various predicates.
    */

        /**
        * @class traits_misc_pointer_tr
        * @private
        * 
        * @brief
        *   In addition to regular pointers, this also allows nullptr.
        */

        /**
        * @class traits_misc_sized_tr
        * @private
        * 
        * @brief
        *   Does not allow types like nkr::void_t, which have no size.
        */
